/**
 * generated by Xtext
 */
package de.schakko.xtext.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterators;
import de.schakko.xtext.automotiveBusDsl.Bussystem;
import de.schakko.xtext.automotiveBusDsl.Component;
import de.schakko.xtext.automotiveBusDsl.MessageFieldType;
import de.schakko.xtext.automotiveBusDsl.MessageInstance;
import de.schakko.xtext.automotiveBusDsl.MessageType;
import java.util.Iterator;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IntegerRange;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class AutomotiveBusDslGenerator implements IGenerator {
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    CharSequence _createContent = this.createContent(resource);
    fsa.generateFile("target.txt", _createContent);
  }
  
  public CharSequence createContent(final Resource resource) {
    StringConcatenation _builder = new StringConcatenation();
    {
      TreeIterator<EObject> _allContents = resource.getAllContents();
      Iterator<MessageInstance> _filter = Iterators.<MessageInstance>filter(_allContents, MessageInstance.class);
      Iterable<MessageInstance> _iterable = IteratorExtensions.<MessageInstance>toIterable(_filter);
      for(final MessageInstance msg : _iterable) {
        EObject _eContainer = msg.eContainer();
        String _name = ((Component) _eContainer).getName();
        _builder.append(_name, "");
        _builder.append("[");
        Bussystem _bus = msg.getBus();
        String _name_1 = _bus.getName();
        _builder.append(_name_1, "");
        _builder.append("] -> ");
        CharSequence _packet = this.toPacket(msg);
        _builder.append(_packet, "");
        _builder.append(" -> ");
        {
          Component _target = msg.getTarget();
          boolean _notEquals = (!Objects.equal(_target, null));
          if (_notEquals) {
            Component _target_1 = msg.getTarget();
            String _name_2 = _target_1.getName();
            _builder.append(_name_2, "");
          } else {
            _builder.append("*");
          }
        }
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence toPacket(final MessageInstance msg) {
    CharSequence _xblockexpression = null;
    {
      MessageType _message = msg.getMessage();
      EList<MessageFieldType> _fields = _message.getFields();
      int _size = _fields.size();
      final int maxIndex = (_size - 1);
      StringConcatenation _builder = new StringConcatenation();
      MessageType _message_1 = msg.getMessage();
      String _name = _message_1.getName();
      _builder.append(_name, "");
      _builder.append("(");
      {
        IntegerRange _upTo = new IntegerRange(0, maxIndex);
        for(final Integer i : _upTo) {
          MessageType _message_2 = msg.getMessage();
          EList<MessageFieldType> _fields_1 = _message_2.getFields();
          MessageFieldType _get = _fields_1.get((i).intValue());
          CharSequence _fieldToPacket = this.fieldToPacket(_get, (i).intValue(), msg);
          _builder.append(_fieldToPacket, "");
          _builder.append(" ");
        }
      }
      _builder.append(")");
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  public CharSequence fieldToPacket(final MessageFieldType field, final int idx, final MessageInstance instance) {
    CharSequence _xblockexpression = null;
    {
      MessageType _message = instance.getMessage();
      EList<MessageFieldType> _fields = _message.getFields();
      final Function1<MessageFieldType, Boolean> _function = new Function1<MessageFieldType, Boolean>() {
        public Boolean apply(final MessageFieldType it) {
          return Boolean.valueOf(it.isIsRequired());
        }
      };
      Iterable<MessageFieldType> _filter = IterableExtensions.<MessageFieldType>filter(_fields, _function);
      List<MessageFieldType> _list = IterableExtensions.<MessageFieldType>toList(_filter);
      int relativeRequiredIndex = _list.indexOf(field);
      String value = "null";
      if ((relativeRequiredIndex >= 0)) {
        EList<String> _params = instance.getParams();
        String _get = _params.get(relativeRequiredIndex);
        value = _get;
      }
      StringConcatenation _builder = new StringConcatenation();
      String _name = field.getName();
      _builder.append(_name, "");
      _builder.append(":\"");
      _builder.append(value, "");
      _builder.append("\"");
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
}
