/*
* generated by Xtext
*/
package de.schakko.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class AutomotiveBusDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBussesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBussesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBussesBussystemParserRuleCall_1_0 = (RuleCall)cBussesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cBussesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cBussesBussystemParserRuleCall_2_1_0 = (RuleCall)cBussesAssignment_2_1.eContents().get(0);
		private final Keyword cMessagesKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMessagesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMessagesMessageTypeParserRuleCall_5_0 = (RuleCall)cMessagesAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cComponentsKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cComponentsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cComponentsComponentParserRuleCall_9_0 = (RuleCall)cComponentsAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cVehiclesKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cLeftCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Assignment cVehiclesAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cVehiclesVehicleTypeParserRuleCall_13_0 = (RuleCall)cVehiclesAssignment_13.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_14 = (Keyword)cGroup.eContents().get(14);
		
		//Model:
		//	"Busses" busses+=Bussystem ("," busses+=Bussystem)+ "Messages" "{" messages+=MessageType+ "}" "Components" "{"
		//	components+=Component+ "}" "Vehicles" "{" vehicles+=VehicleType+ "}";
		public ParserRule getRule() { return rule; }

		//"Busses" busses+=Bussystem ("," busses+=Bussystem)+ "Messages" "{" messages+=MessageType+ "}" "Components" "{"
		//components+=Component+ "}" "Vehicles" "{" vehicles+=VehicleType+ "}"
		public Group getGroup() { return cGroup; }

		//"Busses"
		public Keyword getBussesKeyword_0() { return cBussesKeyword_0; }

		//busses+=Bussystem
		public Assignment getBussesAssignment_1() { return cBussesAssignment_1; }

		//Bussystem
		public RuleCall getBussesBussystemParserRuleCall_1_0() { return cBussesBussystemParserRuleCall_1_0; }

		//("," busses+=Bussystem)+
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//busses+=Bussystem
		public Assignment getBussesAssignment_2_1() { return cBussesAssignment_2_1; }

		//Bussystem
		public RuleCall getBussesBussystemParserRuleCall_2_1_0() { return cBussesBussystemParserRuleCall_2_1_0; }

		//"Messages"
		public Keyword getMessagesKeyword_3() { return cMessagesKeyword_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//messages+=MessageType+
		public Assignment getMessagesAssignment_5() { return cMessagesAssignment_5; }

		//MessageType
		public RuleCall getMessagesMessageTypeParserRuleCall_5_0() { return cMessagesMessageTypeParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }

		//"Components"
		public Keyword getComponentsKeyword_7() { return cComponentsKeyword_7; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }

		//components+=Component+
		public Assignment getComponentsAssignment_9() { return cComponentsAssignment_9; }

		//Component
		public RuleCall getComponentsComponentParserRuleCall_9_0() { return cComponentsComponentParserRuleCall_9_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }

		//"Vehicles"
		public Keyword getVehiclesKeyword_11() { return cVehiclesKeyword_11; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_12() { return cLeftCurlyBracketKeyword_12; }

		//vehicles+=VehicleType+
		public Assignment getVehiclesAssignment_13() { return cVehiclesAssignment_13; }

		//VehicleType
		public RuleCall getVehiclesVehicleTypeParserRuleCall_13_0() { return cVehiclesVehicleTypeParserRuleCall_13_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_14() { return cRightCurlyBracketKeyword_14; }
	}

	public class VehicleTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VehicleType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cHasComponentsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cComponentsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cComponentsComponentCrossReference_3_0 = (CrossReference)cComponentsAssignment_3.eContents().get(0);
		private final RuleCall cComponentsComponentIDTerminalRuleCall_3_0_1 = (RuleCall)cComponentsComponentCrossReference_3_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//VehicleType:
		//	name=ID "has components" "{" components+=[Component]+ "}";
		public ParserRule getRule() { return rule; }

		//name=ID "has components" "{" components+=[Component]+ "}"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"has components"
		public Keyword getHasComponentsKeyword_1() { return cHasComponentsKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//components+=[Component]+
		public Assignment getComponentsAssignment_3() { return cComponentsAssignment_3; }

		//[Component]
		public CrossReference getComponentsComponentCrossReference_3_0() { return cComponentsComponentCrossReference_3_0; }

		//ID
		public RuleCall getComponentsComponentIDTerminalRuleCall_3_0_1() { return cComponentsComponentIDTerminalRuleCall_3_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class BussystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Bussystem");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Bussystem:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class ComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Component");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSendsMessagesKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cMessagesAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cMessagesMessageInstanceParserRuleCall_1_2_0 = (RuleCall)cMessagesAssignment_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//Component:
		//	name=ID ("sends messages" "{" messages+=MessageInstance+ "}")?;
		public ParserRule getRule() { return rule; }

		//name=ID ("sends messages" "{" messages+=MessageInstance+ "}")?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//("sends messages" "{" messages+=MessageInstance+ "}")?
		public Group getGroup_1() { return cGroup_1; }

		//"sends messages"
		public Keyword getSendsMessagesKeyword_1_0() { return cSendsMessagesKeyword_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_1() { return cLeftCurlyBracketKeyword_1_1; }

		//messages+=MessageInstance+
		public Assignment getMessagesAssignment_1_2() { return cMessagesAssignment_1_2; }

		//MessageInstance
		public RuleCall getMessagesMessageInstanceParserRuleCall_1_2_0() { return cMessagesMessageInstanceParserRuleCall_1_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }
	}

	public class MessageTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MessageType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cHasFieldsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFieldsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFieldsMessageFieldTypeParserRuleCall_3_0 = (RuleCall)cFieldsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MessageType:
		//	name=ID "has fields" "{" fields+=MessageFieldType+ "}";
		public ParserRule getRule() { return rule; }

		//name=ID "has fields" "{" fields+=MessageFieldType+ "}"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"has fields"
		public Keyword getHasFieldsKeyword_1() { return cHasFieldsKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//fields+=MessageFieldType+
		public Assignment getFieldsAssignment_3() { return cFieldsAssignment_3; }

		//MessageFieldType
		public RuleCall getFieldsMessageFieldTypeParserRuleCall_3_0() { return cFieldsMessageFieldTypeParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class MessageInstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MessageInstance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOfTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMessageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cMessageMessageTypeCrossReference_1_0 = (CrossReference)cMessageAssignment_1.eContents().get(0);
		private final RuleCall cMessageMessageTypeIDTerminalRuleCall_1_0_1 = (RuleCall)cMessageMessageTypeCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParamsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParamsSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cParamsAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cOverKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBusAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cBusBussystemCrossReference_4_0 = (CrossReference)cBusAssignment_4.eContents().get(0);
		private final RuleCall cBusBussystemIDTerminalRuleCall_4_0_1 = (RuleCall)cBusBussystemCrossReference_4_0.eContents().get(1);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Keyword cAsBroadcastKeyword_5_0 = (Keyword)cAlternatives_5.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final Keyword cToKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cTargetAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final CrossReference cTargetComponentCrossReference_5_1_1_0 = (CrossReference)cTargetAssignment_5_1_1.eContents().get(0);
		private final RuleCall cTargetComponentIDTerminalRuleCall_5_1_1_0_1 = (RuleCall)cTargetComponentCrossReference_5_1_1_0.eContents().get(1);
		
		//MessageInstance:
		//	"of type" message=[MessageType] ("(" params+=STRING+ ")")? "over" bus=[Bussystem] ("as broadcast" | "to"
		//	target=[Component]);
		public ParserRule getRule() { return rule; }

		//"of type" message=[MessageType] ("(" params+=STRING+ ")")? "over" bus=[Bussystem] ("as broadcast" | "to"
		//target=[Component])
		public Group getGroup() { return cGroup; }

		//"of type"
		public Keyword getOfTypeKeyword_0() { return cOfTypeKeyword_0; }

		//message=[MessageType]
		public Assignment getMessageAssignment_1() { return cMessageAssignment_1; }

		//[MessageType]
		public CrossReference getMessageMessageTypeCrossReference_1_0() { return cMessageMessageTypeCrossReference_1_0; }

		//ID
		public RuleCall getMessageMessageTypeIDTerminalRuleCall_1_0_1() { return cMessageMessageTypeIDTerminalRuleCall_1_0_1; }

		//("(" params+=STRING+ ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//params+=STRING+
		public Assignment getParamsAssignment_2_1() { return cParamsAssignment_2_1; }

		//STRING
		public RuleCall getParamsSTRINGTerminalRuleCall_2_1_0() { return cParamsSTRINGTerminalRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }

		//"over"
		public Keyword getOverKeyword_3() { return cOverKeyword_3; }

		//bus=[Bussystem]
		public Assignment getBusAssignment_4() { return cBusAssignment_4; }

		//[Bussystem]
		public CrossReference getBusBussystemCrossReference_4_0() { return cBusBussystemCrossReference_4_0; }

		//ID
		public RuleCall getBusBussystemIDTerminalRuleCall_4_0_1() { return cBusBussystemIDTerminalRuleCall_4_0_1; }

		//"as broadcast" | "to" target=[Component]
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//"as broadcast"
		public Keyword getAsBroadcastKeyword_5_0() { return cAsBroadcastKeyword_5_0; }

		//"to" target=[Component]
		public Group getGroup_5_1() { return cGroup_5_1; }

		//"to"
		public Keyword getToKeyword_5_1_0() { return cToKeyword_5_1_0; }

		//target=[Component]
		public Assignment getTargetAssignment_5_1_1() { return cTargetAssignment_5_1_1; }

		//[Component]
		public CrossReference getTargetComponentCrossReference_5_1_1_0() { return cTargetComponentCrossReference_5_1_1_0; }

		//ID
		public RuleCall getTargetComponentIDTerminalRuleCall_5_1_1_0_1() { return cTargetComponentIDTerminalRuleCall_5_1_1_0_1; }
	}

	public class MessageFieldTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MessageFieldType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cIntKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cCharKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cCharKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cIsRequiredAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cIsRequiredIsRequiredKeyword_2_0 = (Keyword)cIsRequiredAssignment_2.eContents().get(0);
		
		//MessageFieldType:
		//	("int" | "char" | "char[]") name=ID isRequired?="is required"?;
		public ParserRule getRule() { return rule; }

		//("int" | "char" | "char[]") name=ID isRequired?="is required"?
		public Group getGroup() { return cGroup; }

		//"int" | "char" | "char[]"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"int"
		public Keyword getIntKeyword_0_0() { return cIntKeyword_0_0; }

		//"char"
		public Keyword getCharKeyword_0_1() { return cCharKeyword_0_1; }

		//"char[]"
		public Keyword getCharKeyword_0_2() { return cCharKeyword_0_2; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//isRequired?="is required"?
		public Assignment getIsRequiredAssignment_2() { return cIsRequiredAssignment_2; }

		//"is required"
		public Keyword getIsRequiredIsRequiredKeyword_2_0() { return cIsRequiredIsRequiredKeyword_2_0; }
	}
	
	
	private ModelElements pModel;
	private VehicleTypeElements pVehicleType;
	private BussystemElements pBussystem;
	private ComponentElements pComponent;
	private MessageTypeElements pMessageType;
	private MessageInstanceElements pMessageInstance;
	private MessageFieldTypeElements pMessageFieldType;
	private TerminalRule tCHAR;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public AutomotiveBusDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.schakko.xtext.AutomotiveBusDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	"Busses" busses+=Bussystem ("," busses+=Bussystem)+ "Messages" "{" messages+=MessageType+ "}" "Components" "{"
	//	components+=Component+ "}" "Vehicles" "{" vehicles+=VehicleType+ "}";
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//VehicleType:
	//	name=ID "has components" "{" components+=[Component]+ "}";
	public VehicleTypeElements getVehicleTypeAccess() {
		return (pVehicleType != null) ? pVehicleType : (pVehicleType = new VehicleTypeElements());
	}
	
	public ParserRule getVehicleTypeRule() {
		return getVehicleTypeAccess().getRule();
	}

	//Bussystem:
	//	name=ID;
	public BussystemElements getBussystemAccess() {
		return (pBussystem != null) ? pBussystem : (pBussystem = new BussystemElements());
	}
	
	public ParserRule getBussystemRule() {
		return getBussystemAccess().getRule();
	}

	//Component:
	//	name=ID ("sends messages" "{" messages+=MessageInstance+ "}")?;
	public ComponentElements getComponentAccess() {
		return (pComponent != null) ? pComponent : (pComponent = new ComponentElements());
	}
	
	public ParserRule getComponentRule() {
		return getComponentAccess().getRule();
	}

	//MessageType:
	//	name=ID "has fields" "{" fields+=MessageFieldType+ "}";
	public MessageTypeElements getMessageTypeAccess() {
		return (pMessageType != null) ? pMessageType : (pMessageType = new MessageTypeElements());
	}
	
	public ParserRule getMessageTypeRule() {
		return getMessageTypeAccess().getRule();
	}

	//MessageInstance:
	//	"of type" message=[MessageType] ("(" params+=STRING+ ")")? "over" bus=[Bussystem] ("as broadcast" | "to"
	//	target=[Component]);
	public MessageInstanceElements getMessageInstanceAccess() {
		return (pMessageInstance != null) ? pMessageInstance : (pMessageInstance = new MessageInstanceElements());
	}
	
	public ParserRule getMessageInstanceRule() {
		return getMessageInstanceAccess().getRule();
	}

	//MessageFieldType:
	//	("int" | "char" | "char[]") name=ID isRequired?="is required"?;
	public MessageFieldTypeElements getMessageFieldTypeAccess() {
		return (pMessageFieldType != null) ? pMessageFieldType : (pMessageFieldType = new MessageFieldTypeElements());
	}
	
	public ParserRule getMessageFieldTypeRule() {
		return getMessageFieldTypeAccess().getRule();
	}

	//terminal CHAR:
	//	"a".."z" | "A".."Z" | "0".."9";
	public TerminalRule getCHARRule() {
		return (tCHAR != null) ? tCHAR : (tCHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CHAR"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
