/*
* generated by Xtext
*/
grammar InternalAutomotiveBusDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package de.schakko.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.schakko.xtext.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.schakko.xtext.services.AutomotiveBusDslGrammarAccess;

}

@parser::members {

 	private AutomotiveBusDslGrammarAccess grammarAccess;
 	
    public InternalAutomotiveBusDslParser(TokenStream input, AutomotiveBusDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected AutomotiveBusDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Busses' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getModelAccess().getBussesKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getBussesBussystemParserRuleCall_1_0()); 
	    }
		lv_busses_1_0=ruleBussystem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"busses",
        		lv_busses_1_0, 
        		"Bussystem");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getModelAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getBussesBussystemParserRuleCall_2_1_0()); 
	    }
		lv_busses_3_0=ruleBussystem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"busses",
        		lv_busses_3_0, 
        		"Bussystem");
	        afterParserOrEnumRuleCall();
	    }

)
))+	otherlv_4='Messages' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getModelAccess().getMessagesKeyword_3());
    }
	otherlv_5='{' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getModelAccess().getLeftCurlyBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getMessagesMessageTypeParserRuleCall_5_0()); 
	    }
		lv_messages_6_0=ruleMessageType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"messages",
        		lv_messages_6_0, 
        		"MessageType");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getModelAccess().getRightCurlyBracketKeyword_6());
    }
	otherlv_8='Components' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getModelAccess().getComponentsKeyword_7());
    }
	otherlv_9='{' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getModelAccess().getLeftCurlyBracketKeyword_8());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getComponentsComponentParserRuleCall_9_0()); 
	    }
		lv_components_10_0=ruleComponent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"components",
        		lv_components_10_0, 
        		"Component");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_11='}' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getModelAccess().getRightCurlyBracketKeyword_10());
    }
	otherlv_12='Vehicles' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getModelAccess().getVehiclesKeyword_11());
    }
	otherlv_13='{' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getModelAccess().getLeftCurlyBracketKeyword_12());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getVehiclesVehicleTypeParserRuleCall_13_0()); 
	    }
		lv_vehicles_14_0=ruleVehicleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"vehicles",
        		lv_vehicles_14_0, 
        		"VehicleType");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_15='}' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getModelAccess().getRightCurlyBracketKeyword_14());
    }
)
;





// Entry rule entryRuleVehicleType
entryRuleVehicleType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVehicleTypeRule()); }
	 iv_ruleVehicleType=ruleVehicleType 
	 { $current=$iv_ruleVehicleType.current; } 
	 EOF 
;

// Rule VehicleType
ruleVehicleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getVehicleTypeAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVehicleTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='has components' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVehicleTypeAccess().getHasComponentsKeyword_1());
    }
	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getVehicleTypeAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getVehicleTypeRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getVehicleTypeAccess().getComponentsComponentCrossReference_3_0()); 
	}

)
)+	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getVehicleTypeAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleBussystem
entryRuleBussystem returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBussystemRule()); }
	 iv_ruleBussystem=ruleBussystem 
	 { $current=$iv_ruleBussystem.current; } 
	 EOF 
;

// Rule Bussystem
ruleBussystem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getBussystemAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBussystemRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleComponent
entryRuleComponent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComponentRule()); }
	 iv_ruleComponent=ruleComponent 
	 { $current=$iv_ruleComponent.current; } 
	 EOF 
;

// Rule Component
ruleComponent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getComponentAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComponentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(	otherlv_1='sends messages' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getComponentAccess().getSendsMessagesKeyword_1_0());
    }
	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getComponentAccess().getLeftCurlyBracketKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getComponentAccess().getMessagesMessageInstanceParserRuleCall_1_2_0()); 
	    }
		lv_messages_3_0=ruleMessageInstance		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComponentRule());
	        }
       		add(
       			$current, 
       			"messages",
        		lv_messages_3_0, 
        		"MessageInstance");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getComponentAccess().getRightCurlyBracketKeyword_1_3());
    }
)?)
;





// Entry rule entryRuleMessageType
entryRuleMessageType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMessageTypeRule()); }
	 iv_ruleMessageType=ruleMessageType 
	 { $current=$iv_ruleMessageType.current; } 
	 EOF 
;

// Rule MessageType
ruleMessageType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getMessageTypeAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMessageTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='has fields' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMessageTypeAccess().getHasFieldsKeyword_1());
    }
	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMessageTypeAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMessageTypeAccess().getFieldsMessageFieldTypeParserRuleCall_3_0()); 
	    }
		lv_fields_3_0=ruleMessageFieldType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMessageTypeRule());
	        }
       		add(
       			$current, 
       			"fields",
        		lv_fields_3_0, 
        		"MessageFieldType");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMessageTypeAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleMessageInstance
entryRuleMessageInstance returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMessageInstanceRule()); }
	 iv_ruleMessageInstance=ruleMessageInstance 
	 { $current=$iv_ruleMessageInstance.current; } 
	 EOF 
;

// Rule MessageInstance
ruleMessageInstance returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='of type' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMessageInstanceAccess().getOfTypeKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMessageInstanceRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getMessageInstanceAccess().getMessageMessageTypeCrossReference_1_0()); 
	}

)
)(	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMessageInstanceAccess().getLeftParenthesisKeyword_2_0());
    }
(
(
		lv_params_3_0=RULE_STRING
		{
			newLeafNode(lv_params_3_0, grammarAccess.getMessageInstanceAccess().getParamsSTRINGTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMessageInstanceRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"params",
        		lv_params_3_0, 
        		"STRING");
	    }

)
)+	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMessageInstanceAccess().getRightParenthesisKeyword_2_2());
    }
)?	otherlv_5='over' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMessageInstanceAccess().getOverKeyword_3());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMessageInstanceRule());
	        }
        }
	otherlv_6=RULE_ID
	{
		newLeafNode(otherlv_6, grammarAccess.getMessageInstanceAccess().getBusBussystemCrossReference_4_0()); 
	}

)
)(	otherlv_7='as broadcast' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getMessageInstanceAccess().getAsBroadcastKeyword_5_0());
    }

    |(	otherlv_8='to' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getMessageInstanceAccess().getToKeyword_5_1_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMessageInstanceRule());
	        }
        }
	otherlv_9=RULE_ID
	{
		newLeafNode(otherlv_9, grammarAccess.getMessageInstanceAccess().getTargetComponentCrossReference_5_1_1_0()); 
	}

)
))))
;





// Entry rule entryRuleMessageFieldType
entryRuleMessageFieldType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMessageFieldTypeRule()); }
	 iv_ruleMessageFieldType=ruleMessageFieldType 
	 { $current=$iv_ruleMessageFieldType.current; } 
	 EOF 
;

// Rule MessageFieldType
ruleMessageFieldType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='int' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMessageFieldTypeAccess().getIntKeyword_0_0());
    }

    |	otherlv_1='char' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMessageFieldTypeAccess().getCharKeyword_0_1());
    }

    |	otherlv_2='char[]' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMessageFieldTypeAccess().getCharKeyword_0_2());
    }
)(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getMessageFieldTypeAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMessageFieldTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)(
(
		lv_isRequired_4_0=	'is required' 
    {
        newLeafNode(lv_isRequired_4_0, grammarAccess.getMessageFieldTypeAccess().getIsRequiredIsRequiredKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMessageFieldTypeRule());
	        }
       		setWithLastConsumed($current, "isRequired", true, "is required");
	    }

)
)?)
;





RULE_CHAR : ('a'..'z'|'A'..'Z'|'0'..'9');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


